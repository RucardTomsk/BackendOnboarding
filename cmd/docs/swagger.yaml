definitions:
  base.Blame:
    enum:
    - User
    - Postgres
    - Server
    - Unknown
    - Neo4j
    type: string
    x-enum-varnames:
    - BlameUser
    - BlamePostgres
    - BlameServer
    - BlameUnknown
    - BlameNeo4j
  base.ResponseFailure:
    properties:
      blame:
        allOf:
        - $ref: '#/definitions/base.Blame'
        example: Guilty System
      message:
        example: error occurred
        type: string
      status:
        example: Error
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  base.ResponseOK:
    properties:
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  base.ResponseOKWithGUID:
    properties:
      GUID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  base.ResponseOKWithJWT:
    properties:
      GUID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
      JWT:
        type: string
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  model.AboutObject:
    properties:
      contact:
        type: string
      description:
        type: string
      fio:
        type: string
    type: object
  model.AddUserAndRoleRequest:
    properties:
      divisionID:
        type: string
      role:
        type: string
      userID:
        type: string
    type: object
  model.AllQuestUserResponse:
    properties:
      divQuests:
        items:
          $ref: '#/definitions/model.UserQuestObject'
        type: array
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  model.CreateDivisionRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  model.CreateQuestRequest:
    properties:
      description:
        type: string
      divisionID:
        type: string
      name:
        type: string
    type: object
  model.CreateStageRequest:
    properties:
      description:
        type: string
      name:
        type: string
      questID:
        type: string
    type: object
  model.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.DivisionObject:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.GetAllQuestResponse:
    properties:
      quests:
        items:
          $ref: '#/definitions/model.QuestObject'
        type: array
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  model.GetDivisions:
    properties:
      divisions:
        items:
          $ref: '#/definitions/model.DivisionObject'
        type: array
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  model.GetRoles:
    properties:
      roles:
        items:
          type: string
        type: array
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
    type: object
  model.GetUsersRequest:
    properties:
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
      users:
        items:
          $ref: '#/definitions/model.UserObject'
        type: array
    type: object
  model.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.OverQuestObject:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      stages:
        items:
          $ref: '#/definitions/model.StageObject'
        type: array
    type: object
  model.QuestObject:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      stages:
        items:
          $ref: '#/definitions/model.StageObject'
        type: array
    type: object
  model.StageObject:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  model.UpdateAbout:
    properties:
      contact:
        type: string
      description:
        type: string
      fio:
        type: string
    type: object
  model.UserInfoResponse:
    properties:
      status:
        example: OK
        type: string
      trackingID:
        example: 12345678-1234-1234-1234-000000000000
        type: string
      user:
        $ref: '#/definitions/model.UserObject'
    type: object
  model.UserObject:
    properties:
      about:
        $ref: '#/definitions/model.AboutObject'
      email:
        type: string
      id:
        type: string
    type: object
  model.UserQuestObject:
    properties:
      division:
        $ref: '#/definitions/model.DivisionObject'
      quests:
        items:
          $ref: '#/definitions/model.OverQuestObject'
        type: array
    type: object
info:
  contact: {}
paths:
  /division/addUser:
    post:
      consumes:
      - application/json
      description: Add User
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.AddUserAndRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOK'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Add User
      tags:
      - division
  /division/all:
    get:
      consumes:
      - application/json
      description: Get Divisions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetDivisions'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get Divisions
      tags:
      - division
  /division/create:
    post:
      consumes:
      - application/json
      description: Create Division
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CreateDivisionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOKWithGUID'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Create Division
      tags:
      - division
  /quest/add:
    post:
      consumes:
      - application/json
      description: Add Quest
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CreateQuestRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOK'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Add Quest
      tags:
      - quest
  /quest/all:
    get:
      consumes:
      - application/json
      description: Get All Quest
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetAllQuestResponse'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get All Quest
      tags:
      - quest
  /quest/stage/add:
    post:
      consumes:
      - application/json
      description: Add Stage
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CreateStageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOK'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Add Stage
      tags:
      - quest
  /roles/all:
    get:
      consumes:
      - application/json
      description: Get Roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetRoles'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get Roles
      tags:
      - roles
  /user/about/update:
    post:
      consumes:
      - application/json
      description: Update About
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.UpdateAbout'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOK'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Update About
      tags:
      - user
  /user/all:
    get:
      consumes:
      - application/json
      description: Get Users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUsersRequest'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get Users
      tags:
      - user
  /user/info:
    get:
      consumes:
      - application/json
      description: Get User Info
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserInfoResponse'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get User Info
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOKWithJWT'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Login User
      tags:
      - user
  /user/quest:
    get:
      consumes:
      - application/json
      description: Get User Quest
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AllQuestUserResponse'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Get User Quest
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Registration User
      parameters:
      - description: User request
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/base.ResponseOKWithJWT'
        "400":
          description: Bad request (client fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
        "500":
          description: Internal error (server fault)
          schema:
            $ref: '#/definitions/base.ResponseFailure'
      summary: Registration User
      tags:
      - user
swagger: "2.0"
